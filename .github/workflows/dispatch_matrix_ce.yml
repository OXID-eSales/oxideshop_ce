name: Manual run
# Matrix workflow using re-usable github actions

on:
  workflow_dispatch:
    inputs:
      scenario:
        type: choice
        options:
          - 7.0.x
          - 7.1.x
          - 8.0.x
          - branch from 7.0.x
          - branch from 7.1.x
          - branch from 8.0.x
          - smarty 7.0.x
          - use custom testplan
        default: '8.0.x'
        description: 'Choose test scenario'
      limit:
        type: choice
        options: ['yes', 'no']
        default: 'yes'
        description: 'Limit to one PHP/MySQL combination'
      custom_testplan:
        type: string
        description: 'Custom testplan'
        default: '~/defaults/php8.2_mysql5.7_only.yml,~/shop_ce.yml'
      runs_on:
        type: string
        description: 'JSON string/array describing the runner'
        default: '"ubuntu-latest"'
      use_dev_version:
        type: choice
        options: ['no', 'v0', 'v4alpha']
        description: 'Use the dev version of github actions'
        default: 'no'

jobs:
  build_testplan:
    runs-on: ${{ fromJson(inputs.runs_on) }}
    outputs:
      testplan: '${{ steps.build.outputs.testplan }}'
    steps:
      - name: 'Build testplan'
        id: build
        run: |
          # Build testplan
          if [ '${{inputs.limit}}' == 'yes' ]; then
            LIMIT='~/defaults/php8.1_mysql5.7_only.yml,'
          else
            LIMIT=''
          fi
          case '${{ inputs.scenario}}' in
            7.0.x) TESTPLAN="~/defaults/7.0.x.yml,${LIMIT}~/shop_ce_70x.yml" ;;
            7.1.x) TESTPLAN="~/defaults/7.1.x.yml,${LIMIT}~/shop_ce.yml" ;;
            8.0.x) TESTPLAN="${LIMIT}~/shop_ce.yml" ;;
            "smarty 7.0.x") TESTPLAN="~/defaults/7.0.x.yml,${LIMIT}~/smarty_7.0.x.yml" ;;
            "custom testplan") TESTPLAN="${{ inputs.custom_testplan }}" ;;
            *)
              echo "Illegal choice, fix the workflow"
              exit 1
              ;;
          esac
          echo "testplan=${TESTPLAN}" | tee -a "${GITHUB_OUTPUT}"

  dispatch_stable:
    if: ${{ inputs.use_dev_version == 'no' }}
    needs: build_testplan
    uses: oxid-eSales/github-actions/.github/workflows/call-universal_test_workflow.yml@v3
    with:
      testplan: ${{ needs.build_testplan.outputs.testplan }}
      runs_on: ${{ inputs.runs_on }}
      defaults: 'v3'
      plan_folder: '.github/oxid-esales'
    secrets:
      DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
      DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
      CACHE_ENDPOINT: ${{ secrets.CACHE_ENDPOINT }}
      CACHE_ACCESS_KEY: ${{ secrets.CACHE_ACCESS_KEY }}
      CACHE_SECRET_KEY: ${{ secrets.CACHE_SECRET_KEY }}
      enterprise_github_token: ${{ secrets.enterprise_github_token }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  dispatch_v0:
    if: ${{ inputs.use_dev_version == 'v0' }}
    needs: build_testplan
    uses: oxid-eSales/github-actions/.github/workflows/call-universal_test_workflow.yml@v0
    with:
      testplan: ${{ needs.build_testplan.outputs.testplan }}
      runs_on: ${{ inputs.runs_on }}
      defaults: 'v0'
      plan_folder: '.github/oxid-esales'
    secrets:
      DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
      DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
      CACHE_ENDPOINT: ${{ secrets.CACHE_ENDPOINT }}
      CACHE_ACCESS_KEY: ${{ secrets.CACHE_ACCESS_KEY }}
      CACHE_SECRET_KEY: ${{ secrets.CACHE_SECRET_KEY }}
      enterprise_github_token: ${{ secrets.enterprise_github_token }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  dispatch_v4alpha:
    if: ${{ inputs.use_dev_version == 'v4alpha' }}
    needs: build_testplan
    uses: oxid-eSales/github-actions/.github/workflows/call-universal_test_workflow.yml@v4alpha
    with:
      testplan: ${{ needs.build_testplan.outputs.testplan }}
      runs_on: ${{ inputs.runs_on }}
      defaults: 'v4alpha'
      plan_folder: '.github/oxid-esales'
    secrets:
      DOCKER_HUB_USER: ${{ secrets.DOCKER_HUB_USER }}
      DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
      CACHE_ENDPOINT: ${{ secrets.CACHE_ENDPOINT }}
      CACHE_ACCESS_KEY: ${{ secrets.CACHE_ACCESS_KEY }}
      CACHE_SECRET_KEY: ${{ secrets.CACHE_SECRET_KEY }}
      enterprise_github_token: ${{ secrets.enterprise_github_token }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
