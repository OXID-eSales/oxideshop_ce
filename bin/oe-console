#!/usr/bin/env php
<?php

/**
 * Copyright Â© OXID eSales AG. All rights reserved.
 * See LICENSE file for license details.
 */

use OxidEsales\EshopCommunity\Internal\Container\BootstrapContainerFactory;
use OxidEsales\EshopCommunity\Internal\Container\ContainerBuilderFactory;
use OxidEsales\EshopCommunity\Internal\Framework\FileSystem\ProjectRootLocator;
use OxidEsales\EshopCommunity\Internal\Framework\Module\Configuration\Dao\ShopConfigurationDaoInterface;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\EventDispatcher\EventDispatcherInterface;
use Symfony\Component\Filesystem\Path;

$autoloadFileExist = false;
$autoloadFiles = [
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/../../vendor/autoload.php',
    __DIR__ . '/../../../vendor/autoload.php',
    __DIR__ . '/../../../../vendor/autoload.php',
];

foreach ($autoloadFiles as $autoloadFile) {
    if (file_exists($autoloadFile)) {
        require_once $autoloadFile;
        $autoloadFileExist = true;
        break;
    }
}

if (!$autoloadFileExist) {
    exit('autoload.php file was not found!');
}

$shopId =  (int) (new ArgvInput())->getParameterOption(
    '--shop-id',
    1
);

$shopConfigurations = BootstrapContainerFactory::getBootstrapContainer()
    ->get(ShopConfigurationDaoInterface::class)
    ->getAll();
if (!isset($shopConfigurations[$shopId])) {
    echo "Error: Invalid --shop-id value. Configuration for shop '$shopId' can not be found!\n";
    exit(1);
}

$_POST['shp'] = $shopId;

$bootstrapFilePath = Path::join((new ProjectRootLocator())->getProjectRoot(), 'source', 'bootstrap.php');
require_once $bootstrapFilePath;

$container = (new ContainerBuilderFactory())->create()->getContainer();
$container->compile(true);

$commandLoader = $container->get('console.command_loader');

$idCommands = [];
foreach ($container->getParameter('console.command.ids') as $id) {
    $idCommands[] = $container->get($id);
}

$application = new Application();
$application->setCommandLoader($commandLoader);
$application->setDispatcher($container->get(EventDispatcherInterface::class));
$application->addCommands(
    $idCommands
);

$application->run();
